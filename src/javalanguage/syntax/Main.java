package javalanguage.syntax;

public class Main {
    public static void main(String[] args) {
        //&,|, ^
        //<<, >>, ~
        //РАЗБОР ФУНКЦИИ printBinary()

        int value = 7;
        int i = 3;       //если здесь будет ноль то сдвига в маске не будет

        long mask = 1L << i; //если у нас маска единичка сдвинутая на единичку, то мы получаем единичку в второй
        // ячейке: 00000000000000000000000000000010
        //если у нас маска 3 сдвинутая на единичку, то мы получаем единичку в четвертой
        // ячейке: 00000000000000000000000000001000
        printBinary(mask, 32);   //при int value = 9; и int i = 3;            результат: 00000000000000000000000000001000
        printBinary(value,32);   //при int value = 9; и int i = 3;            результат: 00000000000000000000000000001001
        printBinary(mask & value,32); //при int value = 9; и int i = 3; результат: 00000000000000000000000000001000

        long result = (mask & value) >> i;       //при int value = 9; и int i = 3; результат: 00000000000000000000000000001000
        printBinary(result,32);  // сместили единичку обратно к изначальному состоянию:  00000000000000000000000000000001

        System.out.println(result);


    }
    private static void printBinary(long value, int size){ //берется количество байт, и размер В БИТАХ,
        for (int i = size -1; i >= 0; i--){
            long mask = 1L << i;               //в случае long не забываем поставить L
            //сначала мы создали маску у которой только один бит выставлен в единицу, тот бит, который в исследуемой
            // ячейке
            long result = (mask & value) >> i; //потом сравнили маску с исследуемым значением и сдвинули вправо результат
            // чтобы получить число для вывода на экран
            System.out.print(result); //печатает в консоль значение бита с лева направо
        }
        System.out.println();

        //System.out.println(Long.toBinaryString(value));
    }
}
